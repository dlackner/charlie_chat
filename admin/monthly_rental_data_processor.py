#!/usr/bin/env python3
"""
Monthly Rental Data Processing Script
Processes Zillow MSA rental data and generates SQL for Supabase upload
Automatically finds missing coordinates for new cities
"""

import csv
from datetime import datetime
import sys
import os

def determine_market_tier(size_rank):
    """Determine market tier based on size rank"""
    if not size_rank or size_rank == '' or size_rank == '0':
        return None
    try:
        rank = int(float(size_rank))
        if 1 <= rank <= 50:
            return 1
        elif 51 <= rank <= 100:
            return 2
        else:
            return 3
    except (ValueError, TypeError):
        return None

def calculate_yoy_change(current_value, last_year_value):
    """Calculate year-over-year percentage change"""
    try:
        current = float(current_value)
        last_year = float(last_year_value)
        if last_year == 0:
            return None, None
        
        yoy_decimal = (current - last_year) / last_year
        yoy_percentage = f"{yoy_decimal * 100:.2f}%"
        
        return yoy_percentage, round(yoy_decimal * 100, 2)
    except (ValueError, TypeError, ZeroDivisionError):
        return None, None

def get_latest_available_value(row_dict, date_columns, target_date, max_lookback_months=6):
    """
    Get the latest available rental value, looking back up to max_lookback_months
    if the target month is missing
    """
    # Try the target date first
    if target_date in row_dict and row_dict[target_date] and row_dict[target_date].strip():
        try:
            return float(row_dict[target_date]), target_date
        except (ValueError, TypeError):
            pass
    
    # Find target date position in sorted date columns
    sorted_dates = sorted([d for d in date_columns if d.count('-') == 2], reverse=True)
    
    try:
        target_idx = sorted_dates.index(target_date)
    except ValueError:
        # Target date not in columns, start from the most recent
        target_idx = 0
    
    # Look for data within the lookback period (6 months back from target)
    for i in range(target_idx, min(target_idx + max_lookback_months, len(sorted_dates))):
        date_col = sorted_dates[i]
        if date_col in row_dict and row_dict[date_col] and row_dict[date_col].strip():
            try:
                return float(row_dict[date_col]), date_col
            except (ValueError, TypeError):
                continue
    
    return None, None

def find_yoy_comparison_column(date_columns, actual_current_date):
    """
    Find the year-ago column by counting back 12 months from actual current date used
    """
    try:
        # Get all date columns and sort them
        sorted_dates = sorted([d for d in date_columns if d.count('-') == 2])
        
        # Find the index of the actual current date used
        try:
            current_idx = sorted_dates.index(actual_current_date)
        except ValueError:
            # If exact date not found, find the closest earlier date
            current_idx = 0
            for i, date_col in enumerate(sorted_dates):
                if date_col <= actual_current_date:
                    current_idx = i
                else:
                    break
        
        # Go back 12 months (approximately 12 positions in monthly data)
        yoy_idx = current_idx - 12
        if yoy_idx >= 0 and yoy_idx < len(sorted_dates):
            return sorted_dates[yoy_idx]
        
        return None
    except:
        return None

def get_radius_lookup():
    """Get radius lookup based on region ID from user data"""
    return {
        102001: 0.0, 394913: 25.0, 753899: 25.0, 394463: 25.0, 394514: 25.0, 394692: 25.0, 395209: 25.0, 394974: 22.5, 394856: 22.5, 394347: 25.0, 394404: 20.0, 394976: 22.5, 395057: 22.5, 395025: 20.0, 394532: 22.5, 395078: 22.5, 394865: 22.5, 395056: 20.0, 395148: 20.0, 394530: 22.5, 394358: 17.5, 395121: 20.0, 394943: 20.0, 394458: 17.5, 395055: 22.5, 394998: 20.0, 395045: 20.0, 394982: 17.5, 394466: 17.5, 394355: 17.5, 394775: 15.0, 394735: 17.5, 394492: 17.5, 394705: 17.5, 394475: 17.5, 395059: 20.0, 394902: 20.0, 395194: 17.5, 395005: 15.0, 394714: 17.5, 394862: 17.5, 394935: 17.5, 395012: 17.5, 394849: 17.5, 395022: 17.5, 394807: 17.5, 394910: 17.5, 395053: 20.0, 394669: 15.0, 394425: 15.0, 394388: 15.0, 395031: 15.0, 394640: 15.0, 395167: 17.5, 753924: 15.0, 395169: 17.5, 394619: 17.5, 395238: 15.0, 394938: 15.0, 394415: 12.5, 394653: 15.0, 394312: 17.5, 394357: 17.5, 394308: 15.0, 394753: 15.0, 394367: 15.0, 394843: 15.0, 394908: 15.0, 394561: 15.0, 394318: 15.0, 394952: 12.5, 394486: 15.0, 753906: 12.5, 845158: 17.5, 394457: 15.0, 394648: 15.0, 395134: 15.0, 394440: 12.5, 394399: 17.5, 394484: 17.5, 394798: 15.0, 394766: 12.5, 394304: 15.0, 394531: 15.0, 395115: 15.0, 845159: 12.5, 394931: 12.5, 394816: 15.0, 395235: 15.0, 394528: 12.5, 395143: 15.0, 395006: 15.0, 395160: 15.0, 395224: 15.0, 394549: 15.0, 394352: 15.0, 394957: 12.5, 394711: 15.0, 394666: 15.0, 395113: 15.0, 395075: 12.5, 394460: 15.0, 394871: 15.0, 394768: 12.5, 394997: 15.0, 395245: 12.5, 394770: 12.5, 394590: 12.5, 394589: 12.5, 394792: 15.0, 394971: 12.5, 395068: 15.0, 395019: 15.0, 394698: 12.5, 394995: 12.5, 394761: 12.5, 394898: 12.5, 395116: 12.5, 395195: 12.5, 394746: 12.5, 394338: 12.5, 395244: 12.5, 395183: 12.5, 753917: 12.5, 395050: 15.0, 395048: 12.5, 394870: 15.0, 395015: 12.5, 394502: 17.5, 394421: 15.0, 394820: 12.5, 394612: 15.0, 394658: 12.5, 395051: 12.5, 394596: 12.5, 394972: 12.5, 394439: 12.5, 395070: 12.5, 394327: 17.5, 394372: 15.0, 395096: 12.5, 395164: 12.5, 394875: 12.5, 394520: 15.0, 395146: 12.5, 394576: 12.5, 394901: 12.5, 394332: 12.5, 394927: 12.5, 394679: 12.5, 394697: 12.5, 394602: 12.5, 395033: 12.5, 394796: 12.5, 394622: 12.5, 394405: 12.5, 394646: 12.5, 394488: 15.0, 395107: 12.5, 395109: 15.0, 394645: 12.5, 394808: 12.5, 394471: 12.5, 395028: 12.5, 394579: 12.5, 394747: 12.5, 394741: 12.5, 395179: 12.5, 394660: 12.5, 394543: 12.5, 394937: 12.5, 394803: 10.0, 395229: 12.5, 395061: 12.5, 753875: 10.0, 394851: 12.5, 395197: 12.5, 394447: 12.5, 394348: 10.0, 394412: 12.5, 395103: 12.5, 395065: 12.5, 394572: 15.0, 394924: 10.0, 394323: 15.0, 394772: 12.5, 395171: 10.0, 394483: 12.5, 394732: 12.5, 394811: 10.0, 394455: 15.0, 395240: 10.0, 394585: 15.0, 394387: 12.5, 394609: 12.5, 394334: 12.5, 845160: 12.5, 395161: 12.5, 394813: 12.5, 395174: 10.0, 394361: 12.5, 394519: 10.0, 394378: 12.5, 394429: 12.5, 395030: 12.5, 753895: 10.0, 394454: 12.5, 394848: 12.5, 845164: 10.0, 394459: 12.5, 394763: 12.5, 394773: 12.5, 394464: 12.5, 394681: 7.5, 394346: 12.5, 394765: 10.0, 394485: 15.0, 395114: 12.5, 394691: 10.0, 394872: 12.5, 394565: 12.5, 394726: 10.0, 395247: 10.0, 394623: 12.5, 394716: 10.0, 394597: 10.0, 394680: 10.0, 395118: 12.5, 395011: 10.0, 394380: 10.0, 395047: 10.0, 395202: 10.0, 395151: 12.5, 395162: 10.0, 395009: 10.0, 394386: 12.5, 395018: 12.5, 394748: 10.0, 394960: 12.5, 394729: 10.0, 394539: 10.0, 394559: 7.5, 394712: 12.5, 395246: 10.0, 394406: 12.5, 395119: 12.5, 394896: 10.0, 394299: 10.0, 394707: 12.5, 394351: 12.5, 394860: 12.5, 394671: 10.0, 753869: 12.5, 394944: 12.5, 394555: 12.5, 394651: 12.5, 394428: 10.0, 395210: 10.0, 394480: 10.0, 394553: 10.0, 395007: 10.0, 394392: 7.5, 395215: 10.0, 394731: 10.0, 394720: 10.0, 395170: 10.0, 394393: 10.0, 394930: 12.5, 394710: 10.0, 395125: 10.0, 395079: 10.0, 394523: 7.5, 394453: 7.5, 395193: 12.5, 394703: 12.5, 394639: 12.5, 394563: 10.0, 394917: 7.5, 394873: 10.0, 395066: 12.5, 394493: 12.5, 394314: 7.5, 394359: 10.0, 394685: 7.5, 394662: 10.0, 394723: 10.0, 394598: 10.0, 394306: 10.0, 845167: 7.5, 395102: 12.5, 395223: 10.0, 395182: 10.0, 394800: 10.0, 394595: 10.0, 395000: 7.5, 394515: 7.5, 394783: 10.0, 394880: 7.5, 395232: 10.0, 395221: 10.0, 394879: 10.0, 394756: 10.0, 394900: 10.0, 395013: 12.5, 395139: 10.0, 394577: 12.5, 395117: 7.5, 394668: 10.0, 394368: 12.5, 395094: 10.0, 394821: 7.5, 394442: 10.0, 394727: 7.5, 394728: 10.0, 394390: 10.0, 394661: 10.0, 394983: 10.0, 394890: 10.0, 394719: 7.5, 395153: 12.5, 394307: 10.0, 394633: 10.0, 394780: 10.0, 394474: 10.0, 395098: 10.0, 394325: 10.0, 394824: 10.0, 395128: 10.0, 394353: 10.0, 394321: 10.0, 394905: 10.0, 394588: 10.0, 395120: 10.0, 395218: 10.0, 394778: 10.0, 394635: 10.0, 395213: 10.0, 395089: 10.0, 395217: 7.5, 394867: 10.0, 395237: 7.5, 394407: 12.5, 394333: 10.0, 395225: 10.0, 394423: 10.0, 395173: 10.0, 753872: 10.0, 394495: 10.0, 394893: 7.5, 394857: 7.5, 395039: 7.5, 394788: 10.0, 394804: 10.0, 394932: 7.5, 394734: 7.5, 395023: 10.0, 395168: 7.5, 395222: 7.5, 394709: 10.0, 394637: 10.0, 394762: 10.0, 394369: 7.5, 394599: 10.0, 394630: 7.5, 394733: 10.0, 394823: 10.0, 395166: 7.5, 395080: 7.5, 394462: 10.0, 395090: 10.0, 394542: 10.0, 753912: 7.5, 395190: 10.0, 395038: 10.0, 395086: 10.0, 394882: 10.0, 394441: 10.0, 394580: 10.0, 394410: 7.5, 394513: 7.5, 394505: 7.5, 394988: 10.0, 394501: 7.5, 395140: 7.5, 395175: 7.5, 753887: 7.5, 394964: 7.5, 394373: 7.5, 394641: 10.0, 394809: 7.5, 395248: 7.5, 394907: 10.0, 394925: 10.0, 395212: 7.5, 394568: 7.5, 394644: 10.0, 395042: 7.5, 394859: 10.0, 394675: 10.0, 394744: 7.5, 395133: 7.5, 394489: 10.0, 394452: 10.0, 394682: 7.5, 395205: 7.5, 395126: 7.5, 394445: 10.0, 395231: 7.5, 753881: 10.0, 394866: 10.0, 394638: 12.5, 394699: 10.0, 394738: 7.5, 394674: 7.5, 394593: 10.0, 394614: 10.0, 394516: 10.0, 394298: 10.0, 753928: 7.5, 753893: 7.5, 394752: 10.0, 394472: 7.5, 395021: 7.5, 394829: 10.0, 394885: 7.5, 394827: 7.5, 394360: 7.5, 395092: 7.5, 394899: 7.5, 394600: 7.5, 395020: 7.5, 394787: 7.5, 394759: 7.5, 394343: 7.5, 395199: 7.5, 394701: 10.0, 394693: 7.5, 395124: 7.5, 394631: 10.0, 395044: 7.5, 845162: 7.5, 394362: 7.5, 394939: 7.5, 394923: 7.5, 394456: 7.5, 394592: 7.5, 394444: 7.5, 394551: 10.0, 753877: 7.5, 394737: 7.5, 394940: 7.5, 394411: 10.0, 394446: 10.0, 394951: 7.5, 394556: 7.5, 394547: 10.0, 395204: 10.0, 394604: 7.5, 394344: 7.5, 394571: 7.5, 394363: 10.0, 394503: 10.0, 394954: 7.5, 753905: 7.5, 394326: 7.5, 394628: 7.5, 394478: 10.0, 395043: 7.5, 395008: 7.5, 394391: 7.5, 395017: 7.5, 394504: 7.5, 753916: 7.5, 395037: 7.5, 394567: 7.5, 394448: 7.5, 395032: 7.5, 395129: 7.5, 394341: 7.5, 394844: 7.5, 394354: 7.5, 394881: 7.5, 394981: 7.5, 395227: 7.5, 394300: 7.5, 394507: 7.5, 394799: 7.5, 394771: 7.5, 394894: 7.5, 394617: 7.5, 394370: 7.5, 394920: 7.5, 394430: 7.5, 394569: 7.5, 395149: 7.5, 394419: 7.5, 394533: 7.5, 786262: 7.5, 394613: 7.5, 394835: 7.5, 394730: 7.5, 753871: 7.5, 394892: 7.5, 395198: 7.5, 395130: 7.5, 394718: 7.5, 394996: 7.5, 753880: 7.5, 394345: 10.0, 395085: 10.0, 394994: 10.0, 395010: 10.0, 394736: 10.0, 394955: 10.0, 394683: 10.0, 395088: 10.0, 395132: 10.0, 394647: 10.0, 394764: 10.0, 394877: 10.0, 394305: 10.0, 394826: 10.0, 394586: 10.0, 395016: 10.0, 394496: 10.0, 394836: 10.0, 394629: 10.0, 395071: 10.0, 394974: 10.0, 394369: 10.0, 394336: 10.0, 394331: 10.0, 394340: 10.0, 394349: 10.0, 394364: 10.0, 394365: 10.0, 394376: 10.0, 394384: 10.0, 394395: 10.0, 394396: 10.0, 394448: 10.0, 394447: 10.0, 394469: 10.0, 394489: 10.0, 394524: 10.0, 394526: 10.0, 394537: 10.0, 394550: 10.0, 394570: 10.0, 394583: 10.0, 394591: 10.0, 753904: 10.0, 394615: 10.0, 394625: 10.0, 394652: 10.0, 394655: 10.0, 394676: 10.0, 753890: 10.0, 394689: 10.0, 394704: 10.0, 394721: 10.0, 394722: 10.0, 394739: 10.0, 394751: 10.0, 394755: 10.0, 394774: 10.0, 394785: 10.0, 394794: 10.0, 394802: 10.0, 394814: 10.0, 394822: 10.0, 394830: 10.0, 394833: 10.0, 394854: 10.0, 394852: 10.0, 394863: 10.0, 394868: 10.0, 394884: 10.0, 394891: 10.0, 394906: 10.0, 394912: 10.0, 394928: 10.0, 394934: 10.0, 394941: 10.0, 394958: 10.0, 394978: 10.0, 395035: 10.0, 395040: 10.0, 395036: 10.0, 395041: 10.0, 395054: 10.0, 395058: 10.0, 395097: 10.0, 395095: 10.0, 395123: 10.0, 395147: 10.0, 395152: 10.0, 395158: 10.0, 395163: 10.0, 395176: 10.0, 395191: 10.0, 394297: 10.0, 394310: 10.0, 394339: 10.0, 394350: 10.0, 753865: 10.0, 394375: 10.0, 394379: 10.0, 394437: 10.0, 394432: 10.0, 394490: 10.0, 394527: 10.0, 394582: 10.0, 394608: 10.0, 394616: 10.0, 394621: 10.0, 753884: 10.0, 394713: 10.0, 394717: 10.0, 394742: 10.0, 394749: 10.0, 394758: 10.0, 394850: 10.0, 394861: 10.0, 394876: 10.0, 394889: 10.0, 394919: 10.0, 394948: 10.0, 394961: 10.0, 394985: 10.0, 395026: 10.0, 845169: 10.0, 395062: 10.0, 395093: 10.0, 395122: 10.0, 395144: 10.0, 753923: 10.0, 395178: 10.0, 395216: 10.0
    }

def get_coordinate_lookup():
    """Get the current coordinate lookup dictionary"""
    return {
        394913: (40.7128, -74.006), 753899: (34.0522, -118.2437), 394463: (41.8781, -87.6298),
        394514: (32.7767, -96.797), 394692: (29.7604, -95.3698), 395209: (38.9072, -77.0369),
        394974: (39.9526, -75.1652), 394856: (25.7617, -80.1918), 394347: (33.749, -84.388),
        394404: (42.3601, -71.0589), 394976: (33.4484, -112.074), 395057: (37.7749, -122.4194),
        395025: (33.9806, -117.3755), 394532: (42.3314, -83.0458), 395078: (47.6062, -122.3321),
        394865: (44.9778, -93.265), 395056: (32.7157, -117.1611), 395148: (27.9506, -82.4572),
        394530: (39.7392, -104.9903), 394358: (39.2904, -76.6122), 395121: (38.627, -90.1994),
        394943: (28.5383, -81.3792), 394458: (35.2271, -80.8431), 395055: (29.4241, -98.4936),
        394998: (45.5051, -122.675), 395045: (38.5816, -121.4944), 394982: (40.4406, -79.9959),
        394466: (39.1031, -84.512), 394355: (30.2672, -97.7431), 394775: (36.1699, -115.1398),
        394735: (39.0997, -94.5786), 394492: (39.9612, -82.9988), 394705: (39.7684, -86.1581),
        394475: (41.4993, -81.6944), 395059: (37.3382, -121.8863), 394902: (36.1627, -86.7816),
        395194: (36.8529, -75.978), 395005: (41.824, -71.4128), 394714: (30.3322, -81.6557),
        394862: (43.0389, -87.9065), 394935: (35.4676, -97.5164), 395012: (35.7796, -78.6382),
        394849: (35.1495, -90.049), 395022: (37.5407, -77.436), 394807: (38.2527, -85.7585),
        394910: (29.9511, -90.0715), 395053: (40.7608, -111.891), 394669: (41.7658, -72.6734),
        394425: (42.8864, -78.8784), 394388: (33.5186, -86.8104), 395031: (43.1566, -77.6088),
        394640: (42.9634, -85.6681), 395167: (32.2226, -110.9747), 753924: (21.3069, -157.8583),
        395169: (36.1539, -95.9928), 394619: (36.7378, -119.7871), 395238: (42.2626, -71.8023),
        394938: (41.2565, -95.9345), 394415: (41.1792, -73.1894), 394653: (34.8526, -82.394),
        394312: (35.0844, -106.6504), 394357: (35.3733, -119.0187), 394308: (42.6526, -73.7562),
        394753: (35.9606, -83.9207), 394367: (30.4515, -91.1871), 394843: (26.2034, -98.23),
        394908: (41.3083, -72.9279), 394561: (31.7619, -106.485), 394318: (40.6084, -75.4902),
        394952: (34.1975, -119.1771), 394486: (34.0007, -81.0348), 753906: (27.0442, -82.2359),
        845158: (39.7589, -84.1916), 394457: (32.7765, -79.9311), 394648: (36.0726, -79.792),
        395134: (37.9577, -121.2908), 394440: (26.5629, -81.9495), 394399: (43.615, -116.2023),
        394484: (38.8339, -104.8214), 394798: (34.7465, -92.2896), 394766: (28.0395, -81.9498),
        394304: (41.0814, -81.519), 394531: (41.5868, -93.625), 395115: (42.1015, -72.5898),
        845159: (41.7004, -73.921), 394931: (41.223, -111.9738), 394816: (43.0731, -89.4012),
        395235: (36.0999, -80.2442), 394528: (28.9005, -81.2637), 395143: (43.0481, -76.1474),
        395006: (40.2338, -111.6585), 395160: (41.6528, -83.5379), 395224: (37.6872, -97.3301),
        394549: (35.994, -78.8986), 394352: (33.4735, -82.0105), 394957: (28.0345, -80.5887),
        394711: (32.2988, -90.1848), 394666: (40.2732, -76.8867), 395113: (47.6588, -117.426),
        395075: (41.4089, -75.6624), 394460: (35.0456, -85.3097), 394871: (37.6391, -120.9969),
        394768: (40.0379, -76.3055), 394997: (43.6591, -70.2568), 395245: (41.0998, -80.6495),
        394770: (42.7325, -84.5555), 394590: (36.0822, -94.1719), 394589: (35.0527, -78.8784),
        394792: (38.0406, -84.5037), 394971: (30.4213, -87.2169), 395068: (38.4405, -122.7144),
        395019: (39.5296, -119.8138), 394698: (34.7304, -86.5861), 394995: (27.273, -80.3582),
        394761: (30.2241, -92.0198), 394898: (33.6891, -78.8867), 395116: (37.2089, -93.2923),
        395195: (36.3302, -119.2921), 394746: (31.1171, -97.7278), 394338: (35.5951, -82.5515),
        395244: (39.9626, -76.7277), 395183: (38.1041, -122.2566), 753917: (34.953, -120.4357),
        395050: (36.6777, -121.6555), 395048: (44.9429, -123.0351), 394870: (30.6954, -88.0399),
        395015: (40.3356, -75.9269), 394502: (27.8006, -97.3964), 394421: (25.9017, -97.4975),
        394820: (42.9956, -71.4548), 394612: (41.0793, -85.1394), 394658: (30.3674, -89.0928),
        395051: (38.3607, -75.5994), 394596: (43.0125, -83.6875), 394972: (40.6936, -89.589),
        394439: (40.7989, -81.3784), 395070: (32.0809, -81.0912), 394327: (61.2181, -149.9003),
        394372: (30.0802, -94.1266), 395096: (32.5252, -93.7502), 395164: (40.2171, -74.7429),
        394875: (32.3792, -86.3077), 394520: (41.5236, -90.5776), 395146: (30.4383, -84.2807),
        394576: (44.0521, -123.0868), 394901: (26.142, -81.7948), 394332: (42.2808, -83.743),
        394927: (29.1872, -82.1401), 394679: (35.7332, -81.3412), 394697: (38.4193, -82.4452),
        394602: (40.5853, -105.0844), 395033: (42.2711, -89.0937), 394796: (40.8136, -96.7026),
        394622: (29.6516, -82.3248), 394405: (40.01499, -105.2705), 394646: (44.5133, -88.0133),
        394488: (32.46, -84.9877), 395107: (41.6764, -86.252), 395109: (34.9496, -81.932),
        394645: (40.4233, -104.7091), 394808: (33.5779, -101.8552), 394471: (36.5298, -87.3595),
        395028: (37.2709, -79.9414), 394579: (37.9716, -87.5711), 394747: (36.5484, -82.5618),
        394741: (46.2112, -119.1372), 395179: (43.1009, -75.2327), 394660: (39.6418, -77.719),
        394543: (46.7867, -92.1005), 394937: (47.0379, -122.9007), 394803: (32.5007, -94.7405),
        395229: (34.2257, -77.9447), 395061: (35.2828, -120.6596), 753875: (30.7621, -86.5705),
        394851: (37.3022, -120.482), 395197: (31.5493, -97.1467), 394447: (41.9779, -91.6656),
        394348: (39.3643, -74.4229), 394412: (47.5673, -122.6326), 395103: (43.5446, -96.7311),
        395065: (36.9741, -122.0308), 394572: (42.1292, -80.0851), 394924: (41.5243, -72.0759),
        394323: (35.221, -101.8313), 394772: (27.5306, -99.4803), 395171: (33.2098, -87.5692),
        394483: (30.6279, -96.3344), 394732: (42.2917, -85.5872), 394811: (37.4138, -79.1423),
        394455: (38.3498, -81.6326), 395240: (46.6021, -120.5059), 394585: (46.8772, -96.7898),
        394387: (42.0987, -75.918), 394609: (35.3859, -94.3986), 394334: (44.2619, -88.4154),
        845160: (34.61, -112.3157), 395161: (39.0558, -95.689), 394813: (32.8407, -83.6324),
        395174: (32.3513, -95.3011), 394361: (41.7003, -70.3002), 394519: (30.6035, -87.9036),
        394378: (48.7544, -122.4687), 394429: (44.4759, -73.2121), 395030: (44.0121, -92.4802),
        753895: (40.4167, -86.8753), 394454: (40.1164, -88.2434), 394848: (42.3265, -122.8756),
        845164: (43.6423, -72.2518), 394459: (38.0293, -78.4767), 394763: (30.2266, -93.2174),
        394773: (32.3199, -106.7637), 394464: (39.7285, -121.8375), 394681: (32.2163, -80.7526),
        394346: (33.9519, -83.3576), 394765: (34.4839, -114.3225), 394485: (38.9517, -92.3341),
        395114: (39.7817, -89.6501), 394691: (29.5958, -90.7195), 394872: (32.5093, -92.1193),
        394565: (41.6819, -85.9767), 394726: (36.3134, -82.3535), 395247: (32.6927, -114.6277),
        394623: (34.2979, -83.8241), 394716: (34.7541, -77.4302), 394597: (34.1954, -79.7626),
        394680: (19.707, -155.0885), 395118: (45.5579, -94.1632), 395011: (42.7261, -87.7829),
        394380: (44.0582, -121.3153), 395047: (43.4195, -83.9508), 395202: (32.613, -83.6242),
        395151: (39.4667, -87.4139), 395162: (41.8006, -73.1212), 395009: (26.9298, -82.0454),
        394386: (45.7833, -108.5007), 395018: (40.5865, -122.3917), 394748: (41.927, -73.9974),
        394960: (30.1588, -85.6602), 394729: (37.0842, -94.5133), 394539: (39.1582, -75.5244),
        394559: (32.792, -115.5631), 394712: (35.6145, -88.8139), 395246: (39.1404, -121.6169),
        394406: (36.9685, -86.4808), 395119: (37.0965, -113.5684), 394896: (43.2342, -86.2484),
        394299: (32.4487, -99.7331), 394707: (41.6611, -91.5302), 394351: (32.6099, -85.4808),
        394860: (31.9973, -102.0779), 394671: (31.3271, -89.2903), 753869: (40.4842, -88.9937),
        394944: (44.0247, -88.5426), 394555: (44.8113, -91.4985), 394651: (35.6127, -77.3664),
        394428: (36.0957, -79.4378), 395210: (42.4928, -92.3426), 394480: (47.6777, -116.7805),
        394553: (41.0004, -75.18), 395007: (38.2544, -104.6091), 394392: (37.2296, -80.4139),
        395215: (44.9591, -89.6301), 394731: (20.8895, -156.4743), 394720: (42.6828, -89.0187),
        395170: (34.2576, -88.7034), 394393: (39.1653, -86.5264), 394930: (31.8457, -102.3676),
        394710: (42.2459, -84.4014), 395125: (40.7934, -77.86), 395079: (27.8164, -80.4706),
        394523: (34.6059, -86.9833), 394453: (39.9376, -77.6611), 395193: (39.4864, -75.025),
        394703: (43.4917, -112.0339), 394639: (39.0639, -108.5506), 394563: (37.7031, -85.8649),
        394917: (41.8295, -86.2542), 394873: (41.9164, -83.3977), 395066: (35.687, -105.9378),
        394493: (43.2081, -71.5376), 394314: (31.3112, -92.4426), 394359: (44.8012, -68.7778),
        394685: (28.8025, -82.5555), 394662: (36.3275, -119.6457), 394723: (38.5767, -92.1735),
        394598: (34.7998, -87.6773), 394306: (31.5785, -84.1557), 845167: (41.3456, -88.8426),
        395102: (42.4993, -96.4003), 395223: (33.9137, -98.4934), 395182: (30.8327, -83.2785),
        394800: (41.7355, -111.8344), 394595: (35.1983, -111.6513), 395000: (40.6856, -76.195),
        394515: (34.7698, -84.9702), 394783: (40.3409, -76.4113), 394880: (36.214, -83.2949),
        395232: (39.1857, -78.1633), 395221: (40.063, -80.7214), 394879: (39.6295, -79.9559),
        394756: (43.8014, -91.2396), 394900: (38.2975, -122.2869), 395013: (44.0805, -103.231),
        395139: (33.9204, -80.3415), 394577: (40.8021, -124.1637), 395117: (39.9242, -83.8088),
        394668: (38.4496, -78.8689), 394368: (42.3212, -85.1797), 395094: (33.6357, -96.6089),
        394821: (39.1836, -96.5717), 394442: (37.7273, -89.2168), 394727: (40.3267, -78.922),
        394728: (35.8423, -90.7043), 394390: (46.8083, -100.7837), 394661: (30.5044, -90.4612),
        394983: (42.4501, -73.2454), 394890: (48.4212, -122.3341), 394719: (42.097, -79.2353),
        395153: (28.926, -81.985), 394307: (44.6365, -123.1059), 394633: (43.3095, -73.644),
        394780: (34.6036, -98.3959), 394474: (35.1595, -84.8766), 395098: (31.5455, -110.2773),
        394325: (42.0308, -93.6319), 394824: (40.7584, -82.5154), 395128: (38.1496, -79.0717),
        394353: (44.3106, -69.7795), 394321: (40.5187, -78.3947), 394905: (35.1085, -77.0441),
        394588: (36.7281, -108.2187), 395120: (39.7675, -94.8467), 395218: (47.4235, -120.3103),
        394778: (38.9717, -95.2353), 394635: (35.3849, -77.9928), 395213: (43.9748, -75.9108),
        395089: (43.7508, -87.7145), 395217: (40.4184, -80.589), 394867: (46.8721, -113.994),
        395237: (40.8051, -81.9351), 394407: (45.677, -111.0429), 394333: (33.6598, -85.8316),
        395225: (41.2412, -77.0011), 394423: (31.1498, -81.4915), 395173: (42.561, -114.4609),
        753872: (38.3002, -76.5077), 394495: (36.1628, -85.5016), 394893: (40.1934, -85.3864),
        394857: (41.7075, -86.8951), 395039: (43.2165, -123.3417), 394788: (44.1004, -70.2148),
        394804: (46.1382, -122.9382), 394932: (44.6934, -75.486), 394734: (41.12, -87.8612),
        395023: (37.7479, -84.2947), 395168: (35.362, -86.2094), 395222: (42.8339, -88.7326),
        394709: (42.4439, -76.5019), 394637: (47.9253, -97.0329), 394762: (33.0393, -85.0314),
        394369: (43.5945, -83.8889), 394599: (43.775, -88.4388), 394630: (39.8309, -77.2311),
        394733: (48.191, -114.316), 394823: (44.1636, -93.9994), 395166: (39.3279, -120.1833),
        395080: (27.4956, -81.4409), 394462: (41.1398, -104.8202), 395090: (35.2924, -81.5356),
        394542: (42.5006, -90.6646), 753912: (35.1954, -79.4695), 395190: (28.8053, -97.0036),
        395038: (34.257, -85.1647), 395086: (35.8681, -83.5618), 394882: (47.1301, -119.2781),
        394441: (37.3059, -89.5181), 394580: (64.8378, -147.7164), 394410: (46.358, -94.2008),
        394513: (39.6528, -78.7625), 394505: (44.5646, -123.262), 394988: (42.8713, -112.4455),
        394501: (42.1429, -77.0547), 395140: (40.8634, -76.7944), 395175: (39.1502, -123.2078),
        753887: (45.8404, -119.2895), 394964: (39.2667, -81.5615), 394373: (43.4575, -88.8373),
        394641: (42.439, -123.327), 394809: (31.3382, -94.7291), 395248: (39.9403, -82.0132),
        394907: (41.0037, -80.347), 394925: (48.2932, -122.643), 395212: (43.1947, -88.7287),
        394568: (42.0898, -76.8077), 394644: (47.4942, -111.2833), 395042: (35.2784, -93.1338),
        394859: (43.6156, -84.2472), 394675: (46.5884, -112.0245), 394744: (24.5551, -81.78),
        395133: (36.1156, -97.0584), 394489: (39.2014, -85.9214), 394452: (46.716, -122.9543),
        394682: (31.847, -81.5964), 395205: (41.2381, -85.853), 395126: (32.4488, -81.7832),
        394445: (42.8666, -106.3131), 395231: (35.7212, -77.9155), 753881: (39.5505, -107.3248),
        394866: (48.2325, -101.295), 394638: (40.9264, -98.342), 394699: (30.7235, -95.5508),
        394738: (42.9337, -72.278), 394674: (40.5069, -111.4132), 394593: (41.0442, -83.6499),
        394614: (38.2009, -84.8733), 394516: (40.1245, -87.63), 394298: (46.9759, -123.8157),
        753928: (44.3836, -89.8173), 753893: (34.1173, -83.5724), 394752: (42.225, -121.7817),
        394472: (38.9582, -122.6264), 395021: (39.8289, -84.8902), 394829: (46.5436, -87.3954),
        394885: (43.5978, -84.7675), 394827: (40.5887, -83.1285), 394360: (43.4719, -89.7446),
        395092: (47.215, -123.1007), 394899: (31.604, -94.6555), 394600: (35.334, -81.8651),
        395020: (43.826, -111.7897), 394787: (46.4165, -117.0177), 394759: (43.5279, -71.4703),
        394343: (39.3292, -82.1013), 395199: (46.0646, -118.343), 394701: (38.0608, -97.9298),
        394693: (42.2529, -73.7905), 395124: (33.4504, -88.8184), 394631: (44.2911, -105.5022),
        395044: (43.6106, -72.9726), 845162: (32.4421, -97.7942), 394362: (44.197, -72.502),
        394939: (42.4529, -75.0638), 394923: (41.2425, -82.6157), 394456: (39.4967, -88.1762),
        394592: (39.6074, -119.2518), 394444: (39.1638, -119.7674), 394551: (28.7091, -100.4995),
        753877: (35.3132, -83.176), 394737: (40.6994, -99.0817), 394940: (44.0265, -116.9629),
        394411: (36.6437, -93.2185), 394446: (37.6775, -113.0619), 394951: (34.3665, -89.5192),
        394556: (39.6442, -106.5946), 394547: (37.2753, -107.8801), 395204: (38.7628, -93.7361),
        394604: (37.7057, -92.157), 394344: (35.4428, -84.593), 394571: (31.3152, -85.8552),
        394363: (36.7473, -95.9808), 394503: (32.0954, -96.4689), 394954: (36.2083, -115.9839),
        753905: (44.6365, -124.0532), 394326: (42.9387, -74.1882), 394628: (38.8946, -119.7513),
        394478: (34.4048, -103.2052), 395043: (32.5232, -92.6379), 395008: (46.7313, -117.178),
        394391: (43.1902, -112.3441), 395017: (44.5627, -92.5338), 394504: (42.6012, -76.1805),
        753916: (48.2766, -116.5535), 395037: (37.9514, -91.7715), 394567: (46.9965, -120.5478),
        394448: (34.0173, -85.2555), 395032: (41.5875, -109.2029), 395129: (32.2207, -98.2023),
        394341: (46.1879, -123.8313), 394844: (31.244, -90.4531), 394354: (43.6666, -92.9746),
        394881: (46.7324, -117.0002), 394981: (37.4109, -94.7047), 395227: (48.1467, -103.617),
        394300: (34.7745, -96.6789), 394507: (40.0412, -86.8744), 394799: (41.137, -77.4469),
        394771: (41.3114, -105.5911), 394894: (36.6103, -88.3148), 394617: (41.4333, -96.4981),
        394370: (28.982, -95.9694), 394920: (41.1239, -100.7654), 394430: (46.0038, -112.5347),
        394569: (38.4039, -96.1817), 395149: (36.4072, -105.5731), 394419: (44.3114, -96.7984),
        394533: (46.8792, -102.7896), 786262: (41.4078, -92.9118), 394613: (40.2792, -86.5108),
        394835: (36.3434, -88.8503), 394730: (58.3019, -134.4197), 753871: (39.4817, -106.0384),
        394892: (43.1332, -115.6913), 395198: (46.2641, -96.6056), 395130: (40.6256, -103.2077),
        394718: (46.9105, -98.7084), 394996: (34.1862, -103.336), 753880: (41.0089, -91.9626),
        # Additional coordinates for previously missing cities with correct region IDs
        394345: (32.2042, -95.3011), 395085: (34.6834, -82.9521), 394994: (48.1181, -123.4307),
        395010: (39.9356, -91.4099), 394736: (22.0964, -159.5261), 394955: (29.6472, -81.6373),
        394683: (32.7026, -103.136), 395088: (35.3273, -96.9253), 395132: (44.5236, -89.5468),
        394647: (36.1634, -82.8304), 394764: (30.1896, -82.6404), 394877: (34.7143, -76.7302),
        394305: (32.8995, -105.9603), 394826: (40.5581, -85.6686), 394586: (44.2942, -93.2689),
        395016: (40.1696, -122.2358), 394496: (43.3665, -124.2179), 394836: (36.6915, -79.8725),
        394629: (33.3571, -79.2948), 395071: (41.9453, -76.1855), 394974: (45.4647, -98.4865),
        394369: (43.648, -93.3683), 394336: (34.1743, -97.1436), 394331: (40.8668, -82.3092),
        394340: (40.7989, -81.3784), 394349: (41.3672, -85.0586), 394364: (37.8103, -85.4669),
        394365: (38.8606, -86.4872), 394376: (47.4736, -94.8803), 394384: (43.6983, -85.4833),
        394395: (41.0048, -76.4438), 394396: (37.2691, -81.2059), 394448: (38.4583, -105.2417),
        394447: (34.5528, -84.9397), 394469: (39.2806, -80.3442), 394489: (33.4959, -88.4281),
        394524: (39.8403, -88.9548), 394526: (29.3627, -100.8965), 394537: (31.2232, -85.3905),
        394550: (36.0342, -89.3856), 394570: (36.3955, -97.8784), 394583: (39.4851, -80.1423),
        394591: (46.2855, -96.0769), 753904: (31.1351, -93.2568), 394615: (42.2967, -89.6212),
        394625: (35.0717, -81.5504), 394652: (36.1634, -82.8304), 394655: (34.1954, -82.1521),
        394676: (43.5205, -114.3156), 753890: (42.7875, -86.1089), 394689: (34.5037, -93.0552),
        394704: (40.6142, -79.1003), 394721: (43.4799, -110.7624), 394722: (31.9538, -95.1702),
        394739: (30.0474, -99.1403), 394751: (27.5158, -97.8758), 394755: (40.4864, -86.1336),
        394774: (45.3311, -118.0867), 394785: (40.9640, -76.8839), 394794: (40.7426, -84.1052),
        394802: (37.1289, -84.0833), 394814: (36.9613, -120.0607), 394822: (44.0886, -87.6575),
        394830: (42.0331, -92.9077), 394833: (36.6915, -79.8725), 394854: (44.8658, -91.9193),
        394852: (32.3543, -88.7034), 394863: (33.0801, -83.2421), 394868: (43.7094, -98.0298),
        394884: (38.4783, -107.8762), 394891: (40.3934, -82.4858), 394906: (39.4353, -85.3247),
        394912: (41.9747, -97.4170), 394928: (39.2654, -74.5938), 394934: (27.2439, -80.8248),
        394941: (44.0896, -93.2258), 394958: (36.0584, -90.4973), 394978: (42.6814, -90.4787),
        395035: (42.9097, -108.3948), 395040: (28.0206, -97.0544), 395036: (35.9382, -77.7905),
        395041: (33.3943, -104.5230), 395054: (31.4638, -100.4370), 395058: (41.4489, -82.7077),
        395097: (44.7914, -106.9564), 395095: (34.2544, -109.9987), 395123: (30.7549, -81.5457),
        395147: (35.9156, -94.9700), 395152: (33.4357, -94.0672), 395158: (45.5945, -121.1787),
        395163: (44.7631, -85.6206), 395176: (40.1084, -83.7524), 395191: (31.2135, -82.3540),
        # Final batch of missing coordinates - added 2025-10-01
        394297: (45.46, -98.47), 394310: (43.65, -93.37), 394339: (40.87, -82.32),
        394350: (42.93, -76.57), 753865: (37.81, -85.47), 394375: (38.86, -86.49),
        394379: (47.47, -94.88), 394437: (38.45, -105.23), 394432: (34.5, -84.95),
        394490: (33.47, -88.44), 394527: (29.37, -100.9), 394582: (39.49, -80.14),
        394608: (31.05, -93.2), 394616: (42.3, -89.62), 394621: (35.07, -81.65),
        753884: (43.52, -114.32), 394713: (43.48, -110.76), 394717: (31.96, -95.27),
        394742: (30.09, -99.46), 394749: (27.52, -97.86), 394758: (45.32, -118.09),
        394850: (44.88, -91.92), 394861: (33.15, -83.24), 394876: (38.48, -107.88),
        394889: (40.39, -82.49), 394919: (42.03, -97.42), 394948: (44.09, -93.23),
        394961: (36.05, -90.49), 394985: (42.73, -90.48), 395026: (43.02, -108.38),
        845169: (28.03, -97.05), 395062: (41.46, -82.71), 395093: (44.8, -106.96),
        395122: (30.75, -81.57), 395144: (35.92, -94.97), 753923: (45.6, -121.18),
        395178: (40.11, -83.75), 395216: (31.21, -82.35)
    }

def search_missing_coordinates(missing_cities):
    """
    Search for coordinates of missing cities using web search
    Returns dictionary of region_id: (lat, lng) pairs
    """
    # This function would implement web search for coordinates
    # For now, return empty dict - coordinates should be manually added to lookup
    print(f"Found {len(missing_cities)} cities missing coordinates.")
    print("Missing cities:", [city for _, city in missing_cities])
    return {}

def process_rental_data(csv_file_path, target_month=None):
    """Process rental data and generate SQL"""
    
    # Auto-detect target month from CSV if not provided
    if target_month is None:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            date_columns = [col for col in reader.fieldnames if col.count('-') == 2]
            target_month = max(date_columns)  # Use the latest date
    
    print(f"Processing rental data for target month: {target_month}")
    
    # Get coordinate and radius lookups
    coord_lookup = get_coordinate_lookup()
    radius_lookup = get_radius_lookup()
    
    # Read CSV
    print("Reading CSV file...")
    results = []
    missing_coordinates = []
    
    with open(csv_file_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        date_columns = [col for col in reader.fieldnames if col.count('-') == 2]
        
        print(f"Found {len(date_columns)} date columns")
        print(f"Date range: {min(date_columns)} to {max(date_columns)}")
        
        total_rows = 0
        msa_rows = 0
        
        for row in reader:
            total_rows += 1
            
            # Filter out non-MSA rows (keep only metropolitan areas)
            if row.get('RegionType', '').lower() != 'msa':
                continue
                
            msa_rows += 1
            
            region_id = row.get('RegionID', '')
            size_rank = row.get('SizeRank', '')
            region_name = row.get('RegionName', '')
            
            # Skip if no size rank or region_id
            if not size_rank or not region_id or size_rank.strip() == '' or region_id.strip() == '':
                continue
                
            try:
                region_id = int(float(region_id))
                size_rank_num = int(float(size_rank))
            except (ValueError, TypeError):
                continue
                
            # Get current month rental value (with fallback)
            current_value, actual_current_date = get_latest_available_value(row, date_columns, target_month)
            
            # Skip if no current data found
            if current_value is None:
                print(f"No recent data found for {region_name} (ID: {region_id})")
                continue
            
            # Find the YOY comparison column (12 months back from actual current date)
            yoy_comparison_column = find_yoy_comparison_column(date_columns, actual_current_date) if actual_current_date else None
            
            # Get last year's value (with fallback if needed)
            last_year_value, actual_last_year_date = get_latest_available_value(row, date_columns, yoy_comparison_column) if yoy_comparison_column else (None, None)
            
            # Calculate YOY change
            yoy_text, yoy_numeric = calculate_yoy_change(current_value, last_year_value)
            
            # Determine market tier
            market_tier = determine_market_tier(size_rank)
            
            # Get radius from lookup table or default to 7.5
            radius = radius_lookup.get(region_id, 7.5)
            
            # Get latitude and longitude from lookup
            coords = coord_lookup.get(region_id)
            latitude = coords[0] if coords else None
            longitude = coords[1] if coords else None
            
            # Track missing coordinates
            if coords is None:
                missing_coordinates.append((region_id, region_name))
            
            result = {
                'region_id': region_id,
                'size_rank': size_rank_num,
                'city_state': region_name,
                'latitude': latitude,
                'longitude': longitude,
                'monthly_rental_average': int(round(current_value)),
                'radius': radius,
                'year_over_year_growth': yoy_text if yoy_text else 'N/A',
                'yoy_growth_numeric': yoy_numeric,
                'market_tier': market_tier,
                'data_date_used': actual_current_date,
                'yoy_comparison_date': actual_last_year_date
            }
            
            results.append(result)
    
    print(f"Total rows: {total_rows}, MSA rows: {msa_rows}, Processed: {len(results)}")
    
    # Handle missing coordinates
    if missing_coordinates:
        print(f"\n⚠️  Found {len(missing_coordinates)} cities missing coordinates:")
        for region_id, city_name in missing_coordinates:
            print(f"  {region_id}: {city_name}")
        print("\nNote: These cities will have NULL coordinates in the SQL.")
        print("Manual coordinate lookup may be needed for complete data.")
    
    # Generate SQL
    sql_lines = [
        "-- Auto-generated UPSERT for market rental data",
        f"-- Processed on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"-- Target month: {target_month}",
        f"-- Total MSAs: {len(results)}",
        f"-- Cities with coordinates: {len(results) - len(missing_coordinates)}",
        f"-- Cities missing coordinates: {len(missing_coordinates)}",
        "",
        "INSERT INTO public.market_rental_data",
        "  (region_id, size_rank, city_state, latitude, longitude, monthly_rental_average, radius, year_over_year_growth, yoy_growth_numeric, market_tier, updated_at)",
        "VALUES"
    ]
    
    # Add value rows
    value_rows = []
    for result in results:
        yoy_numeric_sql = result['yoy_growth_numeric'] if result['yoy_growth_numeric'] is not None else 'NULL'
        
        # Escape single quotes in city_state
        city_state_escaped = result['city_state'].replace("'", "''")
        
        # Format lat/long for SQL
        lat_sql = result['latitude'] if result['latitude'] is not None else 'NULL'
        lng_sql = result['longitude'] if result['longitude'] is not None else 'NULL'
        
        value_row = (
            f"  ({result['region_id']}, {result['size_rank']}, '{city_state_escaped}', "
            f"{lat_sql}, {lng_sql}, {result['monthly_rental_average']}, {result['radius']}, "
            f"'{result['year_over_year_growth']}', {yoy_numeric_sql}, {result['market_tier']}, now())"
        )
        value_rows.append(value_row)
    
    sql_lines.extend([",\n".join(value_rows)])
    
    # Add conflict resolution
    sql_lines.extend([
        "ON CONFLICT (region_id) DO UPDATE",
        "SET",
        "  size_rank               = EXCLUDED.size_rank,",
        "  city_state              = EXCLUDED.city_state,",
        "  latitude                = COALESCE(EXCLUDED.latitude, public.market_rental_data.latitude),",
        "  longitude               = COALESCE(EXCLUDED.longitude, public.market_rental_data.longitude),",
        "  monthly_rental_average  = EXCLUDED.monthly_rental_average,",
        "  year_over_year_growth   = EXCLUDED.year_over_year_growth,",
        "  yoy_growth_numeric      = EXCLUDED.yoy_growth_numeric,",
        "  market_tier             = EXCLUDED.market_tier,",
        "  radius                  = COALESCE(public.market_rental_data.radius, EXCLUDED.radius),",
        "  updated_at              = now();"
    ])
    
    return results, "\n".join(sql_lines), missing_coordinates

def generate_summary_report(results, missing_coordinates, target_month):
    """Generate a summary report of the processing"""
    
    # Market tier breakdown
    tier_counts = {}
    for result in results:
        tier = result['market_tier']
        tier_counts[tier] = tier_counts.get(tier, 0) + 1
    
    # YOY statistics
    yoy_values = [r['yoy_growth_numeric'] for r in results if r['yoy_growth_numeric'] is not None]
    
    report = [
        f"=== MONTHLY RENTAL DATA PROCESSING SUMMARY ===",
        f"Processing Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Target Month: {target_month}",
        f"Total MSAs processed: {len(results)}",
        "",
        "📊 MARKET TIER BREAKDOWN:",
        f"  Tier 1 (Primary): {tier_counts.get(1, 0)} markets",
        f"  Tier 2 (Secondary): {tier_counts.get(2, 0)} markets", 
        f"  Tier 3 (Tertiary): {tier_counts.get(3, 0)} markets",
        "",
        "📈 YOY GROWTH STATISTICS:",
        f"  MSAs with YOY data: {len(yoy_values)}",
        f"  MSAs missing YOY: {len(results) - len(yoy_values)}",
    ]
    
    if yoy_values:
        avg_yoy = sum(yoy_values) / len(yoy_values)
        yoy_values_sorted = sorted(yoy_values)
        median_yoy = yoy_values_sorted[len(yoy_values_sorted) // 2]
        
        report.extend([
            f"  Average YOY growth: {avg_yoy:.2f}%",
            f"  Median YOY growth: {median_yoy:.2f}%",
            f"  Min YOY growth: {min(yoy_values):.2f}%",
            f"  Max YOY growth: {max(yoy_values):.2f}%",
        ])
    
    # Top 10 fastest growing
    top_growth = sorted([r for r in results if r['yoy_growth_numeric'] is not None], 
                       key=lambda x: x['yoy_growth_numeric'], reverse=True)[:10]
    
    if top_growth:
        report.extend([
            "",
            "🚀 TOP 10 FASTEST GROWING MARKETS:",
        ])
        for i, market in enumerate(top_growth, 1):
            report.append(f"  {i:2d}. {market['city_state']}: {market['yoy_growth_numeric']:.2f}%")
    
    # Coordinate coverage
    coordinates_available = len(results) - len(missing_coordinates)
    coverage_percent = (coordinates_available / len(results)) * 100 if results else 0
    
    report.extend([
        "",
        "🗺️  COORDINATE COVERAGE:",
        f"  Cities with coordinates: {coordinates_available} ({coverage_percent:.1f}%)",
        f"  Cities missing coordinates: {len(missing_coordinates)}",
    ])
    
    if missing_coordinates:
        report.extend([
            "",
            "⚠️  MISSING COORDINATES:",
        ])
        for region_id, city_name in missing_coordinates[:10]:  # Show first 10
            report.append(f"  {region_id}: {city_name}")
        if len(missing_coordinates) > 10:
            report.append(f"  ... and {len(missing_coordinates) - 10} more")
    
    report.extend([
        "",
        "✅ FILES GENERATED:",
        f"  📄 SQL file: rental_data_upsert_{target_month.replace('-', '_')}.sql",
        f"  📊 CSV file: Monthly_Rental_Rates_{target_month.replace('-', '_')}.csv",
        f"  📊 Map CSV: Monthly Rental Rates.csv",
        f"  📋 Summary file: rental_data_summary_{target_month.replace('-', '_')}.txt",
        "",
        "🔄 NEXT STEPS:",
        "  1. Review the SQL file for accuracy",
        "  2. Execute the SQL in your Supabase database",
        "  3. Copy 'Monthly Rental Rates.csv' to /home/dan/Work/mfos/public/",
        "  4. Verify the data was imported correctly and map shows updated data",
        "  5. Update coordinate lookup for missing cities if needed"
    ])
    
    return "\n".join(report)

def generate_csv_file(results, target_month):
    """Generate CSV file in format expected by map component"""
    
    # Sort by size rank for consistency
    sorted_results = sorted(results, key=lambda x: x['size_rank'])
    
    csv_lines = ["RegionID,SizeRank,City/State,Lat,Long,Monthly Average,Radius,YOY"]
    
    for result in sorted_results:
        # Format coordinates (use empty string if None)
        lat = result['latitude'] if result['latitude'] is not None else ''
        lng = result['longitude'] if result['longitude'] is not None else ''
        
        # Format YOY (use original format)
        yoy = result['year_over_year_growth'] if result['year_over_year_growth'] != 'N/A' else ''
        
        # Escape city/state for CSV (add quotes if contains commas)
        city_state = result['city_state']
        if ',' in city_state:
            city_state = f'"{city_state}"'
        
        csv_line = f"{result['region_id']},{result['size_rank']},{city_state},{lat},{lng},{result['monthly_rental_average']},{result['radius']},{yoy}"
        csv_lines.append(csv_line)
    
    return "\n".join(csv_lines)

def main(csv_file_path):
    """Main processing function"""
    
    if not os.path.exists(csv_file_path):
        print(f"❌ Error: CSV file not found at {csv_file_path}")
        return False
    
    try:
        # Process the data
        print("🚀 Starting monthly rental data processing...")
        results, sql, missing_coordinates = process_rental_data(csv_file_path)
        
        # Auto-detect target month from results
        target_month = results[0]['data_date_used'] if results else "unknown"
        
        # Generate summary report
        summary = generate_summary_report(results, missing_coordinates, target_month)
        
        # Generate CSV for map component
        csv_content = generate_csv_file(results, target_month)
        
        # Save SQL to file
        sql_filename = f"rental_data_upsert_{target_month.replace('-', '_')}.sql"
        with open(sql_filename, 'w') as f:
            f.write(sql)
        
        # Save CSV to file (both local and for copying to public directory)
        csv_filename = f"Monthly_Rental_Rates_{target_month.replace('-', '_')}.csv"
        with open(csv_filename, 'w') as f:
            f.write(csv_content)
        
        # Generate the public directory CSV file with exact name needed
        public_csv_filename = "Monthly Rental Rates.csv"
        with open(public_csv_filename, 'w') as f:
            f.write(csv_content)
        
        # Save summary to file
        summary_filename = f"rental_data_summary_{target_month.replace('-', '_')}.txt"
        with open(summary_filename, 'w') as f:
            f.write(summary)
        
        # Print summary to console
        print("\n" + summary)
        print(f"\n✅ Processing complete!")
        print(f"📁 Files saved in current directory:")
        print(f"   📄 {sql_filename} (SQL for database)")
        print(f"   📊 {csv_filename} (CSV with date)")
        print(f"   📊 {public_csv_filename} (CSV for map component)")
        print(f"   📋 {summary_filename} (Processing summary)")
        print(f"\n📝 MANUAL STEP REQUIRED:")
        print(f"   Copy '{public_csv_filename}' to /home/dan/Work/mfos/public/")
        print(f"   This will update the map component with the latest data.")
        
        return True
        
    except Exception as e:
        print(f"❌ Error processing data: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 monthly_rental_data_processor.py <csv_file_path>")
        print("Example: python3 monthly_rental_data_processor.py /path/to/rental_data.csv")
        sys.exit(1)
    
    csv_file = sys.argv[1]
    success = main(csv_file)
    sys.exit(0 if success else 1)