#!/usr/bin/env python3
"""
Monthly Rental Data Processing Script
Processes Zillow MSA rental data and generates SQL for Supabase upload
Uses built-in CSV module instead of pandas
"""

import csv
from datetime import datetime
import sys

def determine_market_tier(size_rank):
    """Determine market tier based on size rank"""
    if not size_rank or size_rank == '' or size_rank == '0':
        return None
    try:
        rank = int(float(size_rank))
        if 1 <= rank <= 50:
            return 1
        elif 51 <= rank <= 100:
            return 2
        else:
            return 3
    except (ValueError, TypeError):
        return None

def calculate_yoy_change(current_value, last_year_value):
    """Calculate year-over-year percentage change"""
    try:
        current = float(current_value)
        last_year = float(last_year_value)
        if last_year == 0:
            return None, None
        
        yoy_decimal = (current - last_year) / last_year
        yoy_percentage = f"{yoy_decimal * 100:.2f}%"
        
        return yoy_percentage, round(yoy_decimal * 100, 2)
    except (ValueError, TypeError, ZeroDivisionError):
        return None, None

def get_latest_available_value(row_dict, date_columns, target_date, max_lookback_months=6):
    """
    Get the latest available rental value, looking back up to max_lookback_months
    if the target month is missing
    """
    # Try the target date first
    if target_date in row_dict and row_dict[target_date] and row_dict[target_date].strip():
        try:
            return float(row_dict[target_date]), target_date
        except (ValueError, TypeError):
            pass
    
    # Find target date position in sorted date columns
    sorted_dates = sorted([d for d in date_columns if d.count('-') == 2], reverse=True)
    
    try:
        target_idx = sorted_dates.index(target_date)
    except ValueError:
        # Target date not in columns, start from the most recent
        target_idx = 0
    
    # Look for data within the lookback period (6 months back from target)
    for i in range(target_idx, min(target_idx + max_lookback_months, len(sorted_dates))):
        date_col = sorted_dates[i]
        if date_col in row_dict and row_dict[date_col] and row_dict[date_col].strip():
            try:
                return float(row_dict[date_col]), date_col
            except (ValueError, TypeError):
                continue
    
    return None, None

def find_yoy_comparison_column(date_columns, actual_current_date):
    """
    Find the year-ago column by counting back 12 months from actual current date used
    """
    try:
        # Get all date columns and sort them
        sorted_dates = sorted([d for d in date_columns if d.count('-') == 2])
        
        # Find the index of the actual current date used
        try:
            current_idx = sorted_dates.index(actual_current_date)
        except ValueError:
            # If exact date not found, find the closest earlier date
            current_idx = 0
            for i, date_col in enumerate(sorted_dates):
                if date_col <= actual_current_date:
                    current_idx = i
                else:
                    break
        
        # Go back 12 months (approximately 12 positions in monthly data)
        yoy_idx = current_idx - 12
        if yoy_idx >= 0 and yoy_idx < len(sorted_dates):
            return sorted_dates[yoy_idx]
        
        return None
    except:
        return None

def process_rental_data(csv_file_path, target_month="2025-08-31"):
    """Process rental data and generate SQL"""
    
    print(f"Processing rental data for target month: {target_month}")
    
    # Latitude/Longitude lookup dictionary
    coord_lookup = {
        394913: (40.7128, -74.006), 753899: (34.0522, -118.2437), 394463: (41.8781, -87.6298),
        394514: (32.7767, -96.797), 394692: (29.7604, -95.3698), 395209: (38.9072, -77.0369),
        394974: (39.9526, -75.1652), 394856: (25.7617, -80.1918), 394347: (33.749, -84.388),
        394404: (42.3601, -71.0589), 394976: (33.4484, -112.074), 395057: (37.7749, -122.4194),
        395025: (33.9806, -117.3755), 394532: (42.3314, -83.0458), 395078: (47.6062, -122.3321),
        394865: (44.9778, -93.265), 395056: (32.7157, -117.1611), 395148: (27.9506, -82.4572),
        394530: (39.7392, -104.9903), 394358: (39.2904, -76.6122), 395121: (38.627, -90.1994),
        394943: (28.5383, -81.3792), 394458: (35.2271, -80.8431), 395055: (29.4241, -98.4936),
        394998: (45.5051, -122.675), 395045: (38.5816, -121.4944), 394982: (40.4406, -79.9959),
        394466: (39.1031, -84.512), 394355: (30.2672, -97.7431), 394775: (36.1699, -115.1398),
        394735: (39.0997, -94.5786), 394492: (39.9612, -82.9988), 394705: (39.7684, -86.1581),
        394475: (41.4993, -81.6944), 395059: (37.3382, -121.8863), 394902: (36.1627, -86.7816),
        395194: (36.8529, -75.978), 395005: (41.824, -71.4128), 394714: (30.3322, -81.6557),
        394862: (43.0389, -87.9065), 394935: (35.4676, -97.5164), 395012: (35.7796, -78.6382),
        394849: (35.1495, -90.049), 395022: (37.5407, -77.436), 394807: (38.2527, -85.7585),
        394910: (29.9511, -90.0715), 395053: (40.7608, -111.891), 394669: (41.7658, -72.6734),
        394425: (42.8864, -78.8784), 394388: (33.5186, -86.8104), 395031: (43.1566, -77.6088),
        394640: (42.9634, -85.6681), 395167: (32.2226, -110.9747), 753924: (21.3069, -157.8583),
        395169: (36.1539, -95.9928), 394619: (36.7378, -119.7871), 395238: (42.2626, -71.8023),
        394938: (41.2565, -95.9345), 394415: (41.1792, -73.1894), 394653: (34.8526, -82.394),
        394312: (35.0844, -106.6504), 394357: (35.3733, -119.0187), 394308: (42.6526, -73.7562),
        394753: (35.9606, -83.9207), 394367: (30.4515, -91.1871), 394843: (26.2034, -98.23),
        394908: (41.3083, -72.9279), 394561: (31.7619, -106.485), 394318: (40.6084, -75.4902),
        394952: (34.1975, -119.1771), 394486: (34.0007, -81.0348), 753906: (27.0442, -82.2359),
        845158: (39.7589, -84.1916), 394457: (32.7765, -79.9311), 394648: (36.0726, -79.792),
        395134: (37.9577, -121.2908), 394440: (26.5629, -81.9495), 394399: (43.615, -116.2023),
        394484: (38.8339, -104.8214), 394798: (34.7465, -92.2896), 394766: (28.0395, -81.9498),
        394304: (41.0814, -81.519), 394531: (41.5868, -93.625), 395115: (42.1015, -72.5898),
        845159: (41.7004, -73.921), 394931: (41.223, -111.9738), 394816: (43.0731, -89.4012),
        395235: (36.0999, -80.2442), 394528: (28.9005, -81.2637), 395143: (43.0481, -76.1474),
        395006: (40.2338, -111.6585), 395160: (41.6528, -83.5379), 395224: (37.6872, -97.3301),
        394549: (35.994, -78.8986), 394352: (33.4735, -82.0105), 394957: (28.0345, -80.5887),
        394711: (32.2988, -90.1848), 394666: (40.2732, -76.8867), 395113: (47.6588, -117.426),
        395075: (41.4089, -75.6624), 394460: (35.0456, -85.3097), 394871: (37.6391, -120.9969),
        394768: (40.0379, -76.3055), 394997: (43.6591, -70.2568), 395245: (41.0998, -80.6495),
        394770: (42.7325, -84.5555), 394590: (36.0822, -94.1719), 394589: (35.0527, -78.8784),
        394792: (38.0406, -84.5037), 394971: (30.4213, -87.2169), 395068: (38.4405, -122.7144),
        395019: (39.5296, -119.8138), 394698: (34.7304, -86.5861), 394995: (27.273, -80.3582),
        394761: (30.2241, -92.0198), 394898: (33.6891, -78.8867), 395116: (37.2089, -93.2923),
        395195: (36.3302, -119.2921), 394746: (31.1171, -97.7278), 394338: (35.5951, -82.5515),
        395244: (39.9626, -76.7277), 395183: (38.1041, -122.2566), 753917: (34.953, -120.4357),
        395050: (36.6777, -121.6555), 395048: (44.9429, -123.0351), 394870: (30.6954, -88.0399),
        395015: (40.3356, -75.9269), 394502: (27.8006, -97.3964), 394421: (25.9017, -97.4975),
        394820: (42.9956, -71.4548), 394612: (41.0793, -85.1394), 394658: (30.3674, -89.0928),
        395051: (38.3607, -75.5994), 394596: (43.0125, -83.6875), 394972: (40.6936, -89.589),
        394439: (40.7989, -81.3784), 395070: (32.0809, -81.0912), 394327: (61.2181, -149.9003),
        394372: (30.0802, -94.1266), 395096: (32.5252, -93.7502), 395164: (40.2171, -74.7429),
        394875: (32.3792, -86.3077), 394520: (41.5236, -90.5776), 395146: (30.4383, -84.2807),
        394576: (44.0521, -123.0868), 394901: (26.142, -81.7948), 394332: (42.2808, -83.743),
        394927: (29.1872, -82.1401), 394679: (35.7332, -81.3412), 394697: (38.4193, -82.4452),
        394602: (40.5853, -105.0844), 395033: (42.2711, -89.0937), 394796: (40.8136, -96.7026),
        394622: (29.6516, -82.3248), 394405: (40.01499, -105.2705), 394646: (44.5133, -88.0133),
        394488: (32.46, -84.9877), 395107: (41.6764, -86.252), 395109: (34.9496, -81.932),
        394645: (40.4233, -104.7091), 394808: (33.5779, -101.8552), 394471: (36.5298, -87.3595),
        395028: (37.2709, -79.9414), 394579: (37.9716, -87.5711), 394747: (36.5484, -82.5618),
        394741: (46.2112, -119.1372), 395179: (43.1009, -75.2327), 394660: (39.6418, -77.719),
        394543: (46.7867, -92.1005), 394937: (47.0379, -122.9007), 394803: (32.5007, -94.7405),
        395229: (34.2257, -77.9447), 395061: (35.2828, -120.6596), 753875: (30.7621, -86.5705),
        394851: (37.3022, -120.482), 395197: (31.5493, -97.1467), 394447: (41.9779, -91.6656),
        394348: (39.3643, -74.4229), 394412: (47.5673, -122.6326), 395103: (43.5446, -96.7311),
        395065: (36.9741, -122.0308), 394572: (42.1292, -80.0851), 394924: (41.5243, -72.0759),
        394323: (35.221, -101.8313), 394772: (27.5306, -99.4803), 395171: (33.2098, -87.5692),
        394483: (30.6279, -96.3344), 394732: (42.2917, -85.5872), 394811: (37.4138, -79.1423),
        394455: (38.3498, -81.6326), 395240: (46.6021, -120.5059), 394585: (46.8772, -96.7898),
        394387: (42.0987, -75.918), 394609: (35.3859, -94.3986), 394334: (44.2619, -88.4154),
        845160: (34.61, -112.3157), 395161: (39.0558, -95.689), 394813: (32.8407, -83.6324),
        395174: (32.3513, -95.3011), 394361: (41.7003, -70.3002), 394519: (30.6035, -87.9036),
        394378: (48.7544, -122.4687), 394429: (44.4759, -73.2121), 395030: (44.0121, -92.4802),
        753895: (40.4167, -86.8753), 394454: (40.1164, -88.2434), 394848: (42.3265, -122.8756),
        845164: (43.6423, -72.2518), 394459: (38.0293, -78.4767), 394763: (30.2266, -93.2174),
        394773: (32.3199, -106.7637), 394464: (39.7285, -121.8375), 394681: (32.2163, -80.7526),
        394346: (33.9519, -83.3576), 394765: (34.4839, -114.3225), 394485: (38.9517, -92.3341),
        395114: (39.7817, -89.6501), 394691: (29.5958, -90.7195), 394872: (32.5093, -92.1193),
        394565: (41.6819, -85.9767), 394726: (36.3134, -82.3535), 395247: (32.6927, -114.6277),
        394623: (34.2979, -83.8241), 394716: (34.7541, -77.4302), 394597: (34.1954, -79.7626),
        394680: (19.707, -155.0885), 395118: (45.5579, -94.1632), 395011: (42.7261, -87.7829),
        394380: (44.0582, -121.3153), 395047: (43.4195, -83.9508), 395202: (32.613, -83.6242),
        395151: (39.4667, -87.4139), 395162: (41.8006, -73.1212), 395009: (26.9298, -82.0454),
        394386: (45.7833, -108.5007), 395018: (40.5865, -122.3917), 394748: (41.927, -73.9974),
        394960: (30.1588, -85.6602), 394729: (37.0842, -94.5133), 394539: (39.1582, -75.5244),
        394559: (32.792, -115.5631), 394712: (35.6145, -88.8139), 395246: (39.1404, -121.6169),
        394406: (36.9685, -86.4808), 395119: (37.0965, -113.5684), 394896: (43.2342, -86.2484),
        394299: (32.4487, -99.7331), 394707: (41.6611, -91.5302), 394351: (32.6099, -85.4808),
        394860: (31.9973, -102.0779), 394671: (31.3271, -89.2903), 753869: (40.4842, -88.9937),
        394944: (44.0247, -88.5426), 394555: (44.8113, -91.4985), 394651: (35.6127, -77.3664),
        394428: (36.0957, -79.4378), 395210: (42.4928, -92.3426), 394480: (47.6777, -116.7805),
        394553: (41.0004, -75.18), 395007: (38.2544, -104.6091), 394392: (37.2296, -80.4139),
        395215: (44.9591, -89.6301), 394731: (20.8895, -156.4743), 394720: (42.6828, -89.0187),
        395170: (34.2576, -88.7034), 394393: (39.1653, -86.5264), 394930: (31.8457, -102.3676),
        394710: (42.2459, -84.4014), 395125: (40.7934, -77.86), 395079: (27.8164, -80.4706),
        394523: (34.6059, -86.9833), 394453: (39.9376, -77.6611), 395193: (39.4864, -75.025),
        394703: (43.4917, -112.0339), 394639: (39.0639, -108.5506), 394563: (37.7031, -85.8649),
        394917: (41.8295, -86.2542), 394873: (41.9164, -83.3977), 395066: (35.687, -105.9378),
        394493: (43.2081, -71.5376), 394314: (31.3112, -92.4426), 394359: (44.8012, -68.7778),
        394685: (28.8025, -82.5555), 394662: (36.3275, -119.6457), 394723: (38.5767, -92.1735),
        394598: (34.7998, -87.6773), 394306: (31.5785, -84.1557), 845167: (41.3456, -88.8426),
        395102: (42.4993, -96.4003), 395223: (33.9137, -98.4934), 395182: (30.8327, -83.2785),
        394800: (41.7355, -111.8344), 394595: (35.1983, -111.6513), 395000: (40.6856, -76.195),
        394515: (34.7698, -84.9702), 394783: (40.3409, -76.4113), 394880: (36.214, -83.2949),
        395232: (39.1857, -78.1633), 395221: (40.063, -80.7214), 394879: (39.6295, -79.9559),
        394756: (43.8014, -91.2396), 394900: (38.2975, -122.2869), 395013: (44.0805, -103.231),
        395139: (33.9204, -80.3415), 394577: (40.8021, -124.1637), 395117: (39.9242, -83.8088),
        394668: (38.4496, -78.8689), 394368: (42.3212, -85.1797), 395094: (33.6357, -96.6089),
        394821: (39.1836, -96.5717), 394442: (37.7273, -89.2168), 394727: (40.3267, -78.922),
        394728: (35.8423, -90.7043), 394390: (46.8083, -100.7837), 394661: (30.5044, -90.4612),
        394983: (42.4501, -73.2454), 394890: (48.4212, -122.3341), 394719: (42.097, -79.2353),
        395153: (28.926, -81.985), 394307: (44.6365, -123.1059), 394633: (43.3095, -73.644),
        394780: (34.6036, -98.3959), 394474: (35.1595, -84.8766), 395098: (31.5455, -110.2773),
        394325: (42.0308, -93.6319), 394824: (40.7584, -82.5154), 395128: (38.1496, -79.0717),
        394353: (44.3106, -69.7795), 394321: (40.5187, -78.3947), 394905: (35.1085, -77.0441),
        394588: (36.7281, -108.2187), 395120: (39.7675, -94.8467), 395218: (47.4235, -120.3103),
        394778: (38.9717, -95.2353), 394635: (35.3849, -77.9928), 395213: (43.9748, -75.9108),
        395089: (43.7508, -87.7145), 395217: (40.4184, -80.589), 394867: (46.8721, -113.994),
        395237: (40.8051, -81.9351), 394407: (45.677, -111.0429), 394333: (33.6598, -85.8316),
        395225: (41.2412, -77.0011), 394423: (31.1498, -81.4915), 395173: (42.561, -114.4609),
        753872: (38.3002, -76.5077), 394495: (36.1628, -85.5016), 394893: (40.1934, -85.3864),
        394857: (41.7075, -86.8951), 395039: (43.2165, -123.3417), 394788: (44.1004, -70.2148),
        394804: (46.1382, -122.9382), 394932: (44.6934, -75.486), 394734: (41.12, -87.8612),
        395023: (37.7479, -84.2947), 395168: (35.362, -86.2094), 395222: (42.8339, -88.7326),
        394709: (42.4439, -76.5019), 394637: (47.9253, -97.0329), 394762: (33.0393, -85.0314),
        394369: (43.5945, -83.8889), 394599: (43.775, -88.4388), 394630: (39.8309, -77.2311),
        394733: (48.191, -114.316), 394823: (44.1636, -93.9994), 395166: (39.3279, -120.1833),
        395080: (27.4956, -81.4409), 394462: (41.1398, -104.8202), 395090: (35.2924, -81.5356),
        394542: (42.5006, -90.6646), 753912: (35.1954, -79.4695), 395190: (28.8053, -97.0036),
        395038: (34.257, -85.1647), 395086: (35.8681, -83.5618), 394882: (47.1301, -119.2781),
        394441: (37.3059, -89.5181), 394580: (64.8378, -147.7164), 394410: (46.358, -94.2008),
        394513: (39.6528, -78.7625), 394505: (44.5646, -123.262), 394988: (42.8713, -112.4455),
        394501: (42.1429, -77.0547), 395140: (40.8634, -76.7944), 395175: (39.1502, -123.2078),
        753887: (45.8404, -119.2895), 394964: (39.2667, -81.5615), 394373: (43.4575, -88.8373),
        394641: (42.439, -123.327), 394809: (31.3382, -94.7291), 395248: (39.9403, -82.0132),
        394907: (41.0037, -80.347), 394925: (48.2932, -122.643), 395212: (43.1947, -88.7287),
        394568: (42.0898, -76.8077), 394644: (47.4942, -111.2833), 395042: (35.2784, -93.1338),
        394859: (43.6156, -84.2472), 394675: (46.5884, -112.0245), 394744: (24.5551, -81.78),
        395133: (36.1156, -97.0584), 394489: (39.2014, -85.9214), 394452: (46.716, -122.9543),
        394682: (31.847, -81.5964), 395205: (41.2381, -85.853), 395126: (32.4488, -81.7832),
        394445: (42.8666, -106.3131), 395231: (35.7212, -77.9155), 753881: (39.5505, -107.3248),
        394866: (48.2325, -101.295), 394638: (40.9264, -98.342), 394699: (30.7235, -95.5508),
        394738: (42.9337, -72.278), 394674: (40.5069, -111.4132), 394593: (41.0442, -83.6499),
        394614: (38.2009, -84.8733), 394516: (40.1245, -87.63), 394298: (46.9759, -123.8157),
        753928: (44.3836, -89.8173), 753893: (34.1173, -83.5724), 394752: (42.225, -121.7817),
        394472: (38.9582, -122.6264), 395021: (39.8289, -84.8902), 394829: (46.5436, -87.3954),
        394885: (43.5978, -84.7675), 394827: (40.5887, -83.1285), 394360: (43.4719, -89.7446),
        395092: (47.215, -123.1007), 394899: (31.604, -94.6555), 394600: (35.334, -81.8651),
        395020: (43.826, -111.7897), 394787: (46.4165, -117.0177), 394759: (43.5279, -71.4703),
        394343: (39.3292, -82.1013), 395199: (46.0646, -118.343), 394701: (38.0608, -97.9298),
        394693: (42.2529, -73.7905), 395124: (33.4504, -88.8184), 394631: (44.2911, -105.5022),
        395044: (43.6106, -72.9726), 845162: (32.4421, -97.7942), 394362: (44.197, -72.502),
        394939: (42.4529, -75.0638), 394923: (41.2425, -82.6157), 394456: (39.4967, -88.1762),
        394592: (39.6074, -119.2518), 394444: (39.1638, -119.7674), 394551: (28.7091, -100.4995),
        753877: (35.3132, -83.176), 394737: (40.6994, -99.0817), 394940: (44.0265, -116.9629),
        394411: (36.6437, -93.2185), 394446: (37.6775, -113.0619), 394951: (34.3665, -89.5192),
        394556: (39.6442, -106.5946), 394547: (37.2753, -107.8801), 395204: (38.7628, -93.7361),
        394604: (37.7057, -92.157), 394344: (35.4428, -84.593), 394571: (31.3152, -85.8552),
        394363: (36.7473, -95.9808), 394503: (32.0954, -96.4689), 394954: (36.2083, -115.9839),
        753905: (44.6365, -124.0532), 394326: (42.9387, -74.1882), 394628: (38.8946, -119.7513),
        394478: (34.4048, -103.2052), 395043: (32.5232, -92.6379), 395008: (46.7313, -117.178),
        394391: (43.1902, -112.3441), 395017: (44.5627, -92.5338), 394504: (42.6012, -76.1805),
        753916: (48.2766, -116.5535), 395037: (37.9514, -91.7715), 394567: (46.9965, -120.5478),
        394448: (34.0173, -85.2555), 395032: (41.5875, -109.2029), 395129: (32.2207, -98.2023),
        394341: (46.1879, -123.8313), 394844: (31.244, -90.4531), 394354: (43.6666, -92.9746),
        394881: (46.7324, -117.0002), 394981: (37.4109, -94.7047), 395227: (48.1467, -103.617),
        394300: (34.7745, -96.6789), 394507: (40.0412, -86.8744), 394799: (41.137, -77.4469),
        394771: (41.3114, -105.5911), 394894: (36.6103, -88.3148), 394617: (41.4333, -96.4981),
        394370: (28.982, -95.9694), 394920: (41.1239, -100.7654), 394430: (46.0038, -112.5347),
        394569: (38.4039, -96.1817), 395149: (36.4072, -105.5731), 394419: (44.3114, -96.7984),
        394533: (46.8792, -102.7896), 786262: (41.4078, -92.9118), 394613: (40.2792, -86.5108),
        394835: (36.3434, -88.8503), 394730: (58.3019, -134.4197), 753871: (39.4817, -106.0384),
        394892: (43.1332, -115.6913), 395198: (46.2641, -96.6056), 395130: (40.6256, -103.2077),
        394718: (46.9105, -98.7084), 394996: (34.1862, -103.336), 753880: (41.0089, -91.9626),
        # Additional coordinates for previously missing cities with correct region IDs
        394345: (32.2042, -95.3011), 395085: (34.6834, -82.9521), 394994: (48.1181, -123.4307),
        395010: (39.9356, -91.4099), 394736: (22.0964, -159.5261), 394955: (29.6472, -81.6373),
        394683: (32.7026, -103.136), 395088: (35.3273, -96.9253), 395132: (44.5236, -89.5468),
        394647: (36.1634, -82.8304), 394764: (30.1896, -82.6404), 394877: (34.7143, -76.7302),
        394305: (32.8995, -105.9603), 394826: (40.5581, -85.6686), 394586: (44.2942, -93.2689),
        395016: (40.1696, -122.2358), 394496: (43.3665, -124.2179), 394836: (36.6915, -79.8725),
        394629: (33.3571, -79.2948), 395071: (41.9453, -76.1855), 394974: (45.4647, -98.4865),
        394369: (43.648, -93.3683), 394336: (34.1743, -97.1436), 394331: (40.8668, -82.3092),
        394340: (40.7989, -81.3784), 394349: (41.3672, -85.0586), 394364: (37.8103, -85.4669),
        394365: (38.8606, -86.4872), 394376: (47.4736, -94.8803), 394384: (43.6983, -85.4833),
        394395: (41.0048, -76.4438), 394396: (37.2691, -81.2059), 394448: (38.4583, -105.2417),
        394447: (34.5528, -84.9397), 394469: (39.2806, -80.3442), 394489: (33.4959, -88.4281),
        394524: (39.8403, -88.9548), 394526: (29.3627, -100.8965), 394537: (31.2232, -85.3905),
        394550: (36.0342, -89.3856), 394570: (36.3955, -97.8784), 394583: (39.4851, -80.1423),
        394591: (46.2855, -96.0769), 753904: (31.1351, -93.2568), 394615: (42.2967, -89.6212),
        394625: (35.0717, -81.5504), 394652: (36.1634, -82.8304), 394655: (34.1954, -82.1521),
        394676: (43.5205, -114.3156), 753890: (42.7875, -86.1089), 394689: (34.5037, -93.0552),
        394704: (40.6142, -79.1003), 394721: (43.4799, -110.7624), 394722: (31.9538, -95.1702),
        394739: (30.0474, -99.1403), 394751: (27.5158, -97.8758), 394755: (40.4864, -86.1336),
        394774: (45.3311, -118.0867), 394785: (40.9640, -76.8839), 394794: (40.7426, -84.1052),
        394802: (37.1289, -84.0833), 394814: (36.9613, -120.0607), 394822: (44.0886, -87.6575),
        394830: (42.0331, -92.9077), 394833: (36.6915, -79.8725), 394854: (44.8658, -91.9193),
        394852: (32.3543, -88.7034), 394863: (33.0801, -83.2421), 394868: (43.7094, -98.0298),
        394884: (38.4783, -107.8762), 394891: (40.3934, -82.4858), 394906: (39.4353, -85.3247),
        394912: (41.9747, -97.4170), 394928: (39.2654, -74.5938), 394934: (27.2439, -80.8248),
        394941: (44.0896, -93.2258), 394958: (36.0584, -90.4973), 394978: (42.6814, -90.4787),
        395035: (42.9097, -108.3948), 395040: (28.0206, -97.0544), 395036: (35.9382, -77.7905),
        395041: (33.3943, -104.5230), 395054: (31.4638, -100.4370), 395058: (41.4489, -82.7077),
        395097: (44.7914, -106.9564), 395095: (34.2544, -109.9987), 395123: (30.7549, -81.5457),
        395147: (35.9156, -94.9700), 395152: (33.4357, -94.0672), 395158: (45.5945, -121.1787),
        395163: (44.7631, -85.6206), 395176: (40.1084, -83.7524), 395191: (31.2135, -82.3540)
    }
    
    # Read CSV
    print("Reading CSV file...")
    results = []
    
    with open(csv_file_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        date_columns = [col for col in reader.fieldnames if col.count('-') == 2]
        
        print(f"Found {len(date_columns)} date columns")
        print(f"Date range: {min(date_columns)} to {max(date_columns)}")
        
        total_rows = 0
        msa_rows = 0
        
        for row in reader:
            total_rows += 1
            
            # Filter out non-MSA rows (keep only metropolitan areas)
            if row.get('RegionType', '').lower() != 'msa':
                continue
                
            msa_rows += 1
            
            region_id = row.get('RegionID', '')
            size_rank = row.get('SizeRank', '')
            region_name = row.get('RegionName', '')
            
            # Skip if no size rank or region_id
            if not size_rank or not region_id or size_rank.strip() == '' or region_id.strip() == '':
                continue
                
            try:
                region_id = int(float(region_id))
                size_rank_num = int(float(size_rank))
            except (ValueError, TypeError):
                continue
                
            # Get current month rental value (with fallback)
            current_value, actual_current_date = get_latest_available_value(row, date_columns, target_month)
            
            # Skip if no current data found
            if current_value is None:
                print(f"No recent data found for {region_name} (ID: {region_id})")
                continue
            
            # Find the YOY comparison column (12 months back from actual current date)
            yoy_comparison_column = find_yoy_comparison_column(date_columns, actual_current_date) if actual_current_date else None
            
            # Get last year's value (with fallback if needed)
            last_year_value, actual_last_year_date = get_latest_available_value(row, date_columns, yoy_comparison_column) if yoy_comparison_column else (None, None)
            
            # Calculate YOY change
            yoy_text, yoy_numeric = calculate_yoy_change(current_value, last_year_value)
            
            # Determine market tier
            market_tier = determine_market_tier(size_rank)
            
            # Default radius for new MSAs (will be preserved if exists in DB via COALESCE)
            default_radius = 10.0
            if market_tier == 1:
                default_radius = 50.0
            elif market_tier == 2:
                default_radius = 35.0
            elif market_tier == 3:
                default_radius = 10.0
            
            # Get latitude and longitude from lookup
            coords = coord_lookup.get(region_id)
            latitude = coords[0] if coords else None
            longitude = coords[1] if coords else None
            
            result = {
                'region_id': region_id,
                'size_rank': size_rank_num,
                'city_state': region_name,
                'latitude': latitude,
                'longitude': longitude,
                'monthly_rental_average': int(round(current_value)),
                'radius': default_radius,
                'year_over_year_growth': yoy_text if yoy_text else 'N/A',
                'yoy_growth_numeric': yoy_numeric,
                'market_tier': market_tier,
                'data_date_used': actual_current_date,
                'yoy_comparison_date': actual_last_year_date
            }
            
            results.append(result)
    
    print(f"Total rows: {total_rows}, MSA rows: {msa_rows}, Processed: {len(results)}")
    
    # Generate SQL
    sql_lines = [
        "-- Auto-generated UPSERT for market rental data",
        f"-- Processed on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"-- Target month: {target_month}",
        f"-- Total MSAs: {len(results)}",
        "",
        "INSERT INTO public.market_rental_data",
        "  (region_id, size_rank, city_state, latitude, longitude, monthly_rental_average, radius, year_over_year_growth, yoy_growth_numeric, market_tier, updated_at)",
        "VALUES"
    ]
    
    # Add value rows
    value_rows = []
    for result in results:
        yoy_numeric_sql = result['yoy_growth_numeric'] if result['yoy_growth_numeric'] is not None else 'NULL'
        
        # Escape single quotes in city_state
        city_state_escaped = result['city_state'].replace("'", "''")
        
        # Format lat/long for SQL
        lat_sql = result['latitude'] if result['latitude'] is not None else 'NULL'
        lng_sql = result['longitude'] if result['longitude'] is not None else 'NULL'
        
        value_row = (
            f"  ({result['region_id']}, {result['size_rank']}, '{city_state_escaped}', "
            f"{lat_sql}, {lng_sql}, {result['monthly_rental_average']}, {result['radius']}, "
            f"'{result['year_over_year_growth']}', {yoy_numeric_sql}, {result['market_tier']}, now())"
        )
        value_rows.append(value_row)
    
    sql_lines.extend([",\n".join(value_rows)])
    
    # Add conflict resolution
    sql_lines.extend([
        "ON CONFLICT (region_id) DO UPDATE",
        "SET",
        "  size_rank               = EXCLUDED.size_rank,",
        "  city_state              = EXCLUDED.city_state,",
        "  monthly_rental_average  = EXCLUDED.monthly_rental_average,",
        "  year_over_year_growth   = EXCLUDED.year_over_year_growth,",
        "  yoy_growth_numeric      = EXCLUDED.yoy_growth_numeric,",
        "  market_tier             = EXCLUDED.market_tier,",
        "  radius                  = COALESCE(public.market_rental_data.radius, EXCLUDED.radius),",
        "  latitude                = COALESCE(public.market_rental_data.latitude, EXCLUDED.latitude),",
        "  longitude               = COALESCE(public.market_rental_data.longitude, EXCLUDED.longitude),",
        "  updated_at              = now();"
    ])
    
    return results, "\n".join(sql_lines)

def generate_summary_report(results):
    """Generate a summary report of the processing"""
    
    # Market tier breakdown
    tier_counts = {}
    for result in results:
        tier = result['market_tier']
        tier_counts[tier] = tier_counts.get(tier, 0) + 1
    
    # YOY statistics
    yoy_values = [r['yoy_growth_numeric'] for r in results if r['yoy_growth_numeric'] is not None]
    
    report = [
        "=== PROCESSING SUMMARY ===",
        f"Total MSAs processed: {len(results)}",
        "",
        "Market Tier Breakdown:",
        f"  Tier 1 (Primary): {tier_counts.get(1, 0)} markets",
        f"  Tier 2 (Secondary): {tier_counts.get(2, 0)} markets", 
        f"  Tier 3 (Tertiary): {tier_counts.get(3, 0)} markets",
        "",
        "YOY Growth Statistics:",
        f"  MSAs with YOY data: {len(yoy_values)}",
        f"  MSAs missing YOY: {len(results) - len(yoy_values)}",
    ]
    
    if yoy_values:
        avg_yoy = sum(yoy_values) / len(yoy_values)
        yoy_values_sorted = sorted(yoy_values)
        median_yoy = yoy_values_sorted[len(yoy_values_sorted) // 2]
        
        report.extend([
            f"  Average YOY growth: {avg_yoy:.2f}%",
            f"  Median YOY growth: {median_yoy:.2f}%",
            f"  Min YOY growth: {min(yoy_values):.2f}%",
            f"  Max YOY growth: {max(yoy_values):.2f}%",
        ])
    
    # Top 10 fastest growing
    top_growth = sorted([r for r in results if r['yoy_growth_numeric'] is not None], 
                       key=lambda x: x['yoy_growth_numeric'], reverse=True)[:10]
    
    if top_growth:
        report.extend([
            "",
            "Top 10 Fastest Growing Markets:",
        ])
        for i, market in enumerate(top_growth, 1):
            report.append(f"  {i:2d}. {market['city_state']}: {market['yoy_growth_numeric']:.2f}%")
    
    return "\n".join(report)

if __name__ == "__main__":
    # Configuration
    csv_file = "/home/dan/Downloads/Metro_zori_uc_mfr_sm_month (2).csv"
    target_month = "2025-08-31"  # Latest month in the data
    
    try:
        # Process the data
        results, sql = process_rental_data(csv_file, target_month)
        
        # Generate summary report
        summary = generate_summary_report(results)
        
        # Save SQL to file
        sql_filename = f"rental_data_upsert_{target_month.replace('-', '_')}.sql"
        with open(sql_filename, 'w') as f:
            f.write(sql)
        
        # Save summary to file
        summary_filename = f"rental_data_summary_{target_month.replace('-', '_')}.txt"
        with open(summary_filename, 'w') as f:
            f.write(summary)
        
        # Print summary to console
        print("\n" + summary)
        print(f"\nSQL file saved as: {sql_filename}")
        print(f"Summary saved as: {summary_filename}")
        
    except Exception as e:
        print(f"Error processing data: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)